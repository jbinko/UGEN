//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./UGEN.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace UGENGenerated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class UGENParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, TYPE=7, IDENTIFIER=8, 
		STRING_TUPLE=9, BLOCKCOMMENT=10, LINECOMMENT=11, WHITESPACE=12, NEWLINE=13;
	public const int
		RULE_start = 0, RULE_pattern = 1, RULE_patternExprList = 2, RULE_patternExprOperatorPipe = 3, 
		RULE_patternExprOperatorOptional = 4, RULE_patternExprTerm = 5, RULE_optionalFlag = 6;
	public static readonly string[] ruleNames = {
		"start", "pattern", "patternExprList", "patternExprOperatorPipe", "patternExprOperatorOptional", 
		"patternExprTerm", "optionalFlag"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "','", "'|'", "'('", "')'", "'?'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "TYPE", "IDENTIFIER", "STRING_TUPLE", 
		"BLOCKCOMMENT", "LINECOMMENT", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "UGEN.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static UGENParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public UGENParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public UGENParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class StartContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(UGENParser.Eof, 0); }
		public PatternContext[] pattern() {
			return GetRuleContexts<PatternContext>();
		}
		public PatternContext pattern(int i) {
			return GetRuleContext<PatternContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUGENVisitor<TResult> typedVisitor = visitor as IUGENVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TYPE || _la==IDENTIFIER) {
				{
				{
				State = 14; pattern();
				}
				}
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 20; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(UGENParser.IDENTIFIER, 0); }
		public PatternExprListContext patternExprList() {
			return GetRuleContext<PatternExprListContext>(0);
		}
		public ITerminalNode TYPE() { return GetToken(UGENParser.TYPE, 0); }
		public PatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUGENVisitor<TResult> typedVisitor = visitor as IUGENVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternContext pattern() {
		PatternContext _localctx = new PatternContext(Context, State);
		EnterRule(_localctx, 2, RULE_pattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TYPE) {
				{
				State = 22; Match(TYPE);
				}
			}

			State = 25; Match(IDENTIFIER);
			State = 26; Match(T__0);
			State = 27; patternExprList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternExprListContext : ParserRuleContext {
		public PatternExprOperatorPipeContext[] patternExprOperatorPipe() {
			return GetRuleContexts<PatternExprOperatorPipeContext>();
		}
		public PatternExprOperatorPipeContext patternExprOperatorPipe(int i) {
			return GetRuleContext<PatternExprOperatorPipeContext>(i);
		}
		public PatternExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patternExprList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUGENVisitor<TResult> typedVisitor = visitor as IUGENVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternExprListContext patternExprList() {
		PatternExprListContext _localctx = new PatternExprListContext(Context, State);
		EnterRule(_localctx, 4, RULE_patternExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29; patternExprOperatorPipe();
			State = 34;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 30; Match(T__1);
				State = 31; patternExprOperatorPipe();
				}
				}
				State = 36;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternExprOperatorPipeContext : ParserRuleContext {
		public PatternExprOperatorOptionalContext[] patternExprOperatorOptional() {
			return GetRuleContexts<PatternExprOperatorOptionalContext>();
		}
		public PatternExprOperatorOptionalContext patternExprOperatorOptional(int i) {
			return GetRuleContext<PatternExprOperatorOptionalContext>(i);
		}
		public PatternExprOperatorPipeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patternExprOperatorPipe; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUGENVisitor<TResult> typedVisitor = visitor as IUGENVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternExprOperatorPipe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternExprOperatorPipeContext patternExprOperatorPipe() {
		PatternExprOperatorPipeContext _localctx = new PatternExprOperatorPipeContext(Context, State);
		EnterRule(_localctx, 6, RULE_patternExprOperatorPipe);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; patternExprOperatorOptional();
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 38; Match(T__2);
				State = 39; patternExprOperatorOptional();
				}
				}
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternExprOperatorOptionalContext : ParserRuleContext {
		public PatternExprTermContext patternExprTerm() {
			return GetRuleContext<PatternExprTermContext>(0);
		}
		public OptionalFlagContext optionalFlag() {
			return GetRuleContext<OptionalFlagContext>(0);
		}
		public PatternExprOperatorOptionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patternExprOperatorOptional; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUGENVisitor<TResult> typedVisitor = visitor as IUGENVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternExprOperatorOptional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternExprOperatorOptionalContext patternExprOperatorOptional() {
		PatternExprOperatorOptionalContext _localctx = new PatternExprOperatorOptionalContext(Context, State);
		EnterRule(_localctx, 8, RULE_patternExprOperatorOptional);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45; patternExprTerm();
			State = 46; optionalFlag();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternExprTermContext : ParserRuleContext {
		public ITerminalNode STRING_TUPLE() { return GetToken(UGENParser.STRING_TUPLE, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(UGENParser.IDENTIFIER, 0); }
		public PatternExprListContext patternExprList() {
			return GetRuleContext<PatternExprListContext>(0);
		}
		public PatternExprTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patternExprTerm; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUGENVisitor<TResult> typedVisitor = visitor as IUGENVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternExprTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternExprTermContext patternExprTerm() {
		PatternExprTermContext _localctx = new PatternExprTermContext(Context, State);
		EnterRule(_localctx, 10, RULE_patternExprTerm);
		try {
			State = 54;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_TUPLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48; Match(STRING_TUPLE);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49; Match(IDENTIFIER);
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 50; Match(T__3);
				State = 51; patternExprList();
				State = 52; Match(T__4);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalFlagContext : ParserRuleContext {
		public OptionalFlagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalFlag; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUGENVisitor<TResult> typedVisitor = visitor as IUGENVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalFlag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalFlagContext optionalFlag() {
		OptionalFlagContext _localctx = new OptionalFlagContext(Context, State);
		EnterRule(_localctx, 12, RULE_optionalFlag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 56; Match(T__5);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xF', '>', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x3', '\x2', '\a', '\x2', '\x12', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'\x15', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x5', 
		'\x3', '\x1A', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '#', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '&', '\v', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\a', '\x5', '+', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', '.', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x39', '\n', '\a', '\x3', '\b', '\x5', '\b', '<', 
		'\n', '\b', '\x3', '\b', '\x2', '\x2', '\t', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x2', '\x2', '\x2', '=', '\x2', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x19', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\'', '\x3', '\x2', '\x2', '\x2', '\n', 
		'/', '\x3', '\x2', '\x2', '\x2', '\f', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\xE', ';', '\x3', '\x2', '\x2', '\x2', '\x10', '\x12', '\x5', '\x4', 
		'\x3', '\x2', '\x11', '\x10', '\x3', '\x2', '\x2', '\x2', '\x12', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x13', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x13', '\x14', '\x3', '\x2', '\x2', '\x2', '\x14', '\x16', '\x3', '\x2', 
		'\x2', '\x2', '\x15', '\x13', '\x3', '\x2', '\x2', '\x2', '\x16', '\x17', 
		'\a', '\x2', '\x2', '\x3', '\x17', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x1A', '\a', '\t', '\x2', '\x2', '\x19', '\x18', '\x3', '\x2', 
		'\x2', '\x2', '\x19', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\a', '\n', '\x2', '\x2', 
		'\x1C', '\x1D', '\a', '\x3', '\x2', '\x2', '\x1D', '\x1E', '\x5', '\x6', 
		'\x4', '\x2', '\x1E', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1F', '$', 
		'\x5', '\b', '\x5', '\x2', ' ', '!', '\a', '\x4', '\x2', '\x2', '!', '#', 
		'\x5', '\b', '\x5', '\x2', '\"', ' ', '\x3', '\x2', '\x2', '\x2', '#', 
		'&', '\x3', '\x2', '\x2', '\x2', '$', '\"', '\x3', '\x2', '\x2', '\x2', 
		'$', '%', '\x3', '\x2', '\x2', '\x2', '%', '\a', '\x3', '\x2', '\x2', 
		'\x2', '&', '$', '\x3', '\x2', '\x2', '\x2', '\'', ',', '\x5', '\n', '\x6', 
		'\x2', '(', ')', '\a', '\x5', '\x2', '\x2', ')', '+', '\x5', '\n', '\x6', 
		'\x2', '*', '(', '\x3', '\x2', '\x2', '\x2', '+', '.', '\x3', '\x2', '\x2', 
		'\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x3', '\x2', '\x2', 
		'\x2', '-', '\t', '\x3', '\x2', '\x2', '\x2', '.', ',', '\x3', '\x2', 
		'\x2', '\x2', '/', '\x30', '\x5', '\f', '\a', '\x2', '\x30', '\x31', '\x5', 
		'\xE', '\b', '\x2', '\x31', '\v', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x39', '\a', '\v', '\x2', '\x2', '\x33', '\x39', '\a', '\n', '\x2', '\x2', 
		'\x34', '\x35', '\a', '\x6', '\x2', '\x2', '\x35', '\x36', '\x5', '\x6', 
		'\x4', '\x2', '\x36', '\x37', '\a', '\a', '\x2', '\x2', '\x37', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x32', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x33', '\x3', '\x2', '\x2', '\x2', '\x38', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\x39', '\r', '\x3', '\x2', '\x2', '\x2', ':', '<', '\a', 
		'\b', '\x2', '\x2', ';', ':', '\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', 
		'\x2', '\x2', '\x2', '<', '\xF', '\x3', '\x2', '\x2', '\x2', '\b', '\x13', 
		'\x19', '$', ',', '\x38', ';',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace UGENGenerated
